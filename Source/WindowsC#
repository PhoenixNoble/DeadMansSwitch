using System.IO.Ports;
using System.Runtime.InteropServices;

namespace MyApp
{
    internal class Program
    {
        static ConsoleEventDelegate handler;   // Keeps it from getting garbage collected
        private delegate bool ConsoleEventDelegate(int eventType);

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern bool SetConsoleCtrlHandler(ConsoleEventDelegate callback, bool add);

        [DllImport("user32.dll")]
        public static extern bool LockWorkStation();


        static string _writeMessage = "DMS";
        static string _readMessage = "";
        static long lastRead = 0;
        static bool _armed = false;
        static bool _continue = false;
        static bool _waitForResponce = false;
        static SerialPort? _serialPort = null;
        static void Main(string[] args)
        {
            handler = new ConsoleEventDelegate(ConsoleEventCallback);
            SetConsoleCtrlHandler(handler, true);

            string userInput;
            StringComparer stringComparer = StringComparer.OrdinalIgnoreCase;
            Thread writeThread = new Thread(Write);
            Thread readThread = new Thread(Read);

            // Create a new SerialPort object with default settings.
            _serialPort = new SerialPort();

            // Allow the user to set the appropriate properties.
            _serialPort.PortName = SetPortName(_serialPort.PortName);
            _serialPort.BaudRate = 115200;
            _serialPort.Parity = Parity.None;;
            _serialPort.DataBits = 8;
            _serialPort.StopBits = StopBits.One;
            _serialPort.Handshake = Handshake.None;

            // Set the write timeouts
            _serialPort.WriteTimeout = 500;

            _serialPort.ErrorReceived += new SerialErrorReceivedEventHandler(myport_ErrorReceived);
            _serialPort.DataReceived += new SerialDataReceivedEventHandler(myport_DataReceived);

            _serialPort.Open();

            _continue = true;
            readThread.Start();
            writeThread.Start();

            Console.WriteLine("Type QUIT to exit");
            while (_continue)
            {
                userInput = Console.ReadLine();

                if (stringComparer.Equals("quit", userInput))
                {
                    _continue = false;
                }
            }

            readThread.Join();
            writeThread.Join();
            _serialPort.Close();
        }

        private static void LockWindows()
        {
            if (_armed)
            {
                LockWorkStation();
                _armed = false;
            }
        }

        private static bool ConsoleEventCallback(int eventType)
        {
            if (eventType == 2)
            {
                LockWindows();
            }
            return false;
        }

        private static void myport_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            lastRead = DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond;
            _waitForResponce = false;
            _readMessage = _serialPort.ReadExisting();
            if (!_armed)
            {
                Console.WriteLine(_readMessage);
                if (_readMessage.Contains("DMS"))
                {
                    _armed = true;
                    Console.WriteLine("_armed = true");
                }
            }
        }

        private static void Read()
        {
            while (_continue)
            {
                if ( lastRead > 0 && (DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond) - lastRead > 100)                
                {
                    LockWindows();
                }

                Thread.Sleep(25);
            }
        }

        private static void myport_ErrorReceived(object sender, SerialErrorReceivedEventArgs e)
        {
            LockWindows();
        }

        private static void Write()
        {
            while (_continue)
            {
                if (!_waitForResponce)
                {
                    try
                    {
                        if (_serialPort.IsOpen)
                        {
                            _waitForResponce = true;
                            _serialPort.WriteLine(_writeMessage);
                        }
                    }
                    catch (Exception e)
                    {
                        LockWindows();
                    }
                }
                Thread.Sleep(50);
            }
        }

        // Display Port values and prompt user to enter a port.
        private static string SetPortName(string defaultPortName)
        {
            string portName;

            Console.WriteLine("Available Ports:");
            foreach (string s in SerialPort.GetPortNames())
            {
                Console.WriteLine("   {0}", s);
            }

            Console.Write("Enter COM port value (Default: {0}): ", defaultPortName);
            portName = Console.ReadLine();

            if (portName == "" || !(portName.ToLower()).StartsWith("com"))
            {
                portName = defaultPortName;
            }
            return portName;
        }

    }
}
